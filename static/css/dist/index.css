/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
@font-face {
  font-family: "chalkboard";
  src: url("../fonts/chalkboard/chalkboard.otf") format("opentype"); }

/* Colors */
/* Framework constants */
/* End Framework constants */
/* Navbar stuff */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* Colors */
/* Framework constants */
/* End Framework constants */
/* Navbar stuff */
.jelly-animation {
  -webkit-animation: jelly 1000ms linear both;
  animation: jelly 1000ms linear both; }

.jelly-animation-out {
  -webkit-animation: jelly-out 1000ms linear both;
  animatino: jelly-out 1000ms linear both; }

/* Generated with Bounce.js. Edit at http://goo.gl/y3FSYm */
@-webkit-keyframes jelly {
  0% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

@keyframes jelly {
  0% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

/* Generated with Bounce.js. Edit at http://goo.gl/TFx1Sj */
@-webkit-keyframes jelly-out {
  0% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

@keyframes jelly-out {
  0% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

.ico-btn {
  background-color: #ed7307;
  color: white;
  border-radius: 5px;
  display: block;
  text-align: center;
  cursor: pointer;
  text-decoration: none; }
  .ico-btn a.ico-btn, .ico-btn a.ico-btn:hover, .ico-btn a.ico-btn:focus {
    text-decoration: none !important;
    color: white; }
  .ico-btn:active, .ico-btn:hover {
    background-color: #bb5b06; }

.ico-btn-lg {
  font-size: 20px;
  padding: 5px; }

.jelly-animation {
  -webkit-animation: jelly 1000ms linear both;
  animation: jelly 1000ms linear both; }

.jelly-animation-out {
  -webkit-animation: jelly-out 1000ms linear both;
  animatino: jelly-out 1000ms linear both; }

/* Generated with Bounce.js. Edit at http://goo.gl/y3FSYm */
@-webkit-keyframes jelly {
  0% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

@keyframes jelly {
  0% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

/* Generated with Bounce.js. Edit at http://goo.gl/TFx1Sj */
@-webkit-keyframes jelly-out {
  0% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

@keyframes jelly-out {
  0% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

/* Colors */
/* Framework constants */
/* End Framework constants */
/* Navbar stuff */
html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%; }

*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

* {
  padding: 0;
  margin: 0; }

html, body {
  height: 100%; }

.skrollr-desktop body {
  height: 100% !important; }

body {
  font-family: sans-serif; }

p {
  margin: 1em 0; }

.parallax-image-wrapper {
  position: fixed;
  left: 0;
  width: 100%;
  overflow: hidden; }

.parallax-image-wrapper-50 {
  height: 50%;
  top: -50%; }

.parallax-image-wrapper-100 {
  height: 100%;
  top: -100%; }

.parallax-image {
  display: none;
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover; }

.parallax-image-50 {
  height: 200%;
  top: -50%; }

.parallax-image-100 {
  height: 100%;
  top: 0; }

.parallax-image.skrollable-between {
  display: block; }

.no-skrollr .parallax-image-wrapper {
  display: none !important; }

#skrollr-body {
  height: 100%;
  overflow: visible;
  position: relative; }

.gap {
  background: transparent center no-repeat;
  background-size: cover; }
  .gap.first {
    top: 100%; }

.skrollr .gap {
  background: transparent !important; }

.gap-50 {
  height: 50%; }

.gap-100 {
  height: 100%; }

.header, .content {
  background: #fff;
  padding: 1em;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

.content-full {
  height: 100%; }

#done {
  height: 100%; }

.section {
  transition: opacity 500ms ease-in;
  -o-transition: opacity 500ms ease-in;
  -ms-transition: opacity 500ms ease-in;
  -webkit-transition: opacity 500ms ease-in;
  height: 100%; }
  .section p {
    font-size: 1.45em; }
    @media (min-width: 992px) {
      .section p {
        font-size: 1em; } }
  .section#top {
    background-color: #ed7307;
    opacity: 0;
    padding-top: 100px; }
    .section#top .title-container {
      color: white;
      text-align: center; }
      .section#top .title-container, .section#top .title-container * {
        color: white;
        font-family: 'chalkboard'; }
      .section#top .title-container a, .section#top .title-container a:visited, .section#top .title-container a:hover, .section#top .title-container a:active {
        text-decoration: none;
        color: inherit;
        font-size: 100px; }
    @media (min-width: 768px) {
      .section#top {
        padding-top: 250px; } }
    .section#top .menu {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%; }
      .section#top .menu .menu-item {
        background-origin: content-box;
        background-repeat: no-repeat;
        background-position: 0 0;
        background-size: 100% 100%;
        height: 100px;
        width: 100px;
        position: absolute;
        padding: .5%;
        opacity: 0; }
        .section#top .menu .menu-item a, .section#top .menu .menu-item a:visited, .section#top .menu .menu-item a:hover, .section#top .menu .menu-item a:active {
          text-decoration: none;
          color: inherit; }
        @media (min-width: 768px) {
          .section#top .menu .menu-item {
            height: 250px;
            width: 250px; } }
        .section#top .menu .menu-item .text {
          font-size: 1.5em;
          position: absolute; }
          @media (min-width: 768px) {
            .section#top .menu .menu-item .text {
              font-size: 4em; } }
        .section#top .menu .menu-item.about {
          background-image: url(/img/thought_bubble.png);
          left: 0%;
          top: 2; }
          @media (min-width: 768px) {
            .section#top .menu .menu-item.about {
              left: 20%; } }
          .section#top .menu .menu-item.about .text {
            top: 26%;
            left: 23%; }
        .section#top .menu .menu-item.blog {
          background-image: url(/img/thought_bubble_right.png);
          top: 2;
          right: 0%; }
          @media (min-width: 768px) {
            .section#top .menu .menu-item.blog {
              right: 15%; } }
          .section#top .menu .menu-item.blog .text {
            top: 29%;
            left: 27%; }
        .section#top .menu .menu-item.contact {
          background-image: url(/img/thought_bubble_right_invert.png);
          right: 30%;
          top: 175px; }
          @media (min-width: 768px) {
            .section#top .menu .menu-item.contact {
              top: 400px; } }
          .section#top .menu .menu-item.contact .text {
            top: 48%;
            left: 11%; }
  .section#about .title {
    margin: 3% 0% 0% 3%;
    color: #ed7307;
    display: inline-block;
    padding: 0 3%;
    border-radius: 5px; }
    @media (min-width: 992px) {
      .section#about .title {
        margin-left: 7%; } }
  .section#about .about-content {
    font-size: 1.5em;
    text-align: center;
    margin: 3% 5%; }
    @media (min-width: 768px) {
      .section#about .about-content {
        font-size: 3.25em; } }
    @media (min-width: 768px) {
      .section#about .about-content {
        font-size: 3.8em; } }
  .section#about a.learn-more {
    margin: 0 auto;
    float: none;
    *zoom: 1;
    width: auto;
    max-width: 500px;
    float: none;
    display: block;
    margin-right: auto;
    margin-left: auto;
    padding-left: 0;
    padding-right: 0; }
    .section#about a.learn-more:before, .section#about a.learn-more:after {
      content: '';
      display: table; }
    .section#about a.learn-more:after {
      clear: both; }
  .section#contact {
    background-color: white; }
    .section#contact .title {
      background: rgba(237, 115, 7, 0.5);
      color: white;
      display: inline-block;
      float: right;
      margin: 3% 3% 0% 0%;
      padding: 0 3%;
      border-radius: 5px; }
      @media (min-width: 992px) {
        .section#contact .title {
          margin-right: 7%; } }
    .section#contact .contact-person {
      margin: 20px auto;
      font-family: chalkboard;
      color: white;
      position: relative; }
      .section#contact .contact-person#kristian {
        height: 320px;
        background-image: url(/img/kristian2.jpg);
        background-repeat: no-repeat;
        background-size: 100%;
        background-position: center; }
        @media (min-width: 992px) {
          .section#contact .contact-person#kristian {
            background-size: 75%; } }
        .section#contact .contact-person#kristian img {
          height: 320px;
          width: 214px; }
      .section#contact .contact-person .contact-info .contact-label {
        color: #ed7307;
        font-size: 5em; }
      .section#contact .contact-person .contact-info .info {
        font-size: 2em;
        display: block; }
      .section#contact .contact-person .contact-info a.info, .section#contact .contact-person .contact-info a.info * {
        text-decoration: none;
        color: white;
        display: inline-block; }
        @media (min-width: 992px) {
          .section#contact .contact-person .contact-info a.info, .section#contact .contact-person .contact-info a.info * {
            display: block; } }
  .section h2 {
    font-family: chalkboard; }
  .section .title {
    font-size: 5em;
    font-family: "chalkboard"; }
    @media (min-width: 768px) {
      .section .title {
        font-size: 8em; } }
  .section .section-title {
    font-size: 4em; }
    @media (min-width: 768px) {
      .section .section-title {
        font-size: 7em; } }

.overlay {
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 100%;
  background: rgba(0, 0, 0, 0.5); }

/*# sourceMappingURL=/dist/js/index.css.map */