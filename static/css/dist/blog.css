/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
@font-face {
  font-family: "chalkboard";
  src: url("../fonts/chalkboard/chalkboard.otf") format("opentype"); }

/* Colors */
/* Framework constants */
/* End Framework constants */
/* Navbar stuff */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* Colors */
/* Framework constants */
/* End Framework constants */
/* Navbar stuff */
.jelly-animation {
  -webkit-animation: jelly 1000ms linear both;
  animation: jelly 1000ms linear both; }

.jelly-animation-out {
  -webkit-animation: jelly-out 1000ms linear both;
  animatino: jelly-out 1000ms linear both; }

/* Generated with Bounce.js. Edit at http://goo.gl/y3FSYm */
@-webkit-keyframes jelly {
  0% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

@keyframes jelly {
  0% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

/* Generated with Bounce.js. Edit at http://goo.gl/TFx1Sj */
@-webkit-keyframes jelly-out {
  0% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

@keyframes jelly-out {
  0% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

.ico-btn {
  background-color: #ed7307;
  color: white;
  border-radius: 5px;
  display: block;
  text-align: center;
  cursor: pointer;
  text-decoration: none; }
  .ico-btn a.ico-btn, .ico-btn a.ico-btn:hover, .ico-btn a.ico-btn:focus {
    text-decoration: none !important;
    color: white; }
  .ico-btn:active, .ico-btn:hover {
    background-color: #bb5b06; }

.ico-btn-lg {
  font-size: 20px;
  padding: 5px; }

.jelly-animation {
  -webkit-animation: jelly 1000ms linear both;
  animation: jelly 1000ms linear both; }

.jelly-animation-out {
  -webkit-animation: jelly-out 1000ms linear both;
  animatino: jelly-out 1000ms linear both; }

/* Generated with Bounce.js. Edit at http://goo.gl/y3FSYm */
@-webkit-keyframes jelly {
  0% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

@keyframes jelly {
  0% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.225, 0, 0, 0, 0, 1.225, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.442, 0, 0, 0, 0, 1.442, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.57, 0, 0, 0, 0, 1.57, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.606, 0, 0, 0, 0, 1.606, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.575, 0, 0, 0, 0, 1.575, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.524, 0, 0, 0, 0, 1.524, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.49, 0, 0, 0, 0, 1.49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.48, 0, 0, 0, 0, 1.48, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.496, 0, 0, 0, 0, 1.496, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.504, 0, 0, 0, 0, 1.504, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.499, 0, 0, 0, 0, 1.499, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

/* Generated with Bounce.js. Edit at http://goo.gl/TFx1Sj */
@-webkit-keyframes jelly-out {
  0% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

@keyframes jelly-out {
  0% {
    -webkit-transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  4.7% {
    -webkit-transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.275, 0, 0, 0, 0, 1.275, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  9.41% {
    -webkit-transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.058, 0, 0, 0, 0, 1.058, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  14.11% {
    -webkit-transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.93, 0, 0, 0, 0, 0.93, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  18.72% {
    -webkit-transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.894, 0, 0, 0, 0, 0.894, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  24.32% {
    -webkit-transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.925, 0, 0, 0, 0, 0.925, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  29.93% {
    -webkit-transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.976, 0, 0, 0, 0, 0.976, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  35.54% {
    -webkit-transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.01, 0, 0, 0, 0, 1.01, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  41.04% {
    -webkit-transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.02, 0, 0, 0, 0, 1.02, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  52.15% {
    -webkit-transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.004, 0, 0, 0, 0, 1.004, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  63.26% {
    -webkit-transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(0.996, 0, 0, 0, 0, 0.996, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  85.49% {
    -webkit-transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1.001, 0, 0, 0, 0, 1.001, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); }
  100% {
    -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); } }

/* Colors */
/* Framework constants */
/* End Framework constants */
/* Navbar stuff */
html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%; }

*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

body {
  margin-top: 65px; }

.navbar {
  height: 60px;
  width: 100%;
  position: fixed;
  top: 0;
  background: #eee; }
  .navbar, .navbar * {
    z-index: 2000; }
  .navbar .nav-menu-toggle {
    position: absolute;
    height: 100%;
    font-size: 17px;
    padding-top: 20px;
    right: 20px;
    cursor: pointer; }
    .navbar .nav-menu-toggle, .navbar .nav-menu-toggle * {
      color: #ed7307; }
    @media (min-width: 992px) {
      .navbar .nav-menu-toggle {
        display: none; } }
  .navbar .nav-menu {
    width: 100%;
    position: absolute;
    top: 60px;
    border-top: 1px solid #888888;
    overflow: hidden;
    height: 1px;
    display: none; }
    .navbar .nav-menu.show {
      display: block; }
    @media (min-width: 768px) {
      .navbar .nav-menu {
        display: block;
        position: relative;
        top: 0;
        border: none;
        height: 60px; } }
    .navbar .nav-menu .nav-item-container {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 100%;
      margin-left: 0%;
      margin-right: 0%;
      height: 60px;
      border-bottom: 1px solid #888888; }
      .navbar .nav-menu .nav-item-container:before, .navbar .nav-menu .nav-item-container:after {
        content: '';
        display: table; }
      .navbar .nav-menu .nav-item-container:after {
        clear: both; }
      @media (min-width: 992px) {
        .navbar .nav-menu .nav-item-container {
          *zoom: 1;
          float: left;
          clear: none;
          text-align: inherit;
          width: 20%;
          margin-left: 0%;
          margin-right: 0%; }
          .navbar .nav-menu .nav-item-container:before, .navbar .nav-menu .nav-item-container:after {
            content: '';
            display: table; }
          .navbar .nav-menu .nav-item-container:after {
            clear: both; } }
      @media (min-width: 768px) {
        .navbar .nav-menu .nav-item-container {
          height: 60px !important; } }
      .navbar .nav-menu .nav-item-container, .navbar .nav-menu .nav-item-container * {
        color: #ed7307;
        background: #eee; }
      .navbar .nav-menu .nav-item-container:hover, .navbar .nav-menu .nav-item-container:hover * {
        color: white;
        background: #ed7307; }
      .navbar .nav-menu .nav-item-container .nav-item {
        height: 100%;
        display: block;
        width: 100%;
        height: 100%;
        text-align: center;
        cursor: pointer;
        line-height: 1.42857;
        text-decoration: none;
        padding: 15px; }

.subnav {
  width: 100%;
  margin-bottom: 10px;
  height: 50px; }
  .subnav .ico-btn {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 100%;
    margin-left: 0%;
    margin-right: 0%;
    border-radius: 0px;
    text-align: center;
    background-color: white;
    color: #ed7307;
    text-align: center !important; }
    .subnav .ico-btn:before, .subnav .ico-btn:after {
      content: '';
      display: table; }
    .subnav .ico-btn:after {
      clear: both; }
    @media (min-width: 992px) {
      .subnav .ico-btn {
        *zoom: 1;
        float: left;
        clear: none;
        text-align: inherit;
        width: 33.33333%;
        margin-left: 0%;
        margin-right: 0%; }
        .subnav .ico-btn:before, .subnav .ico-btn:after {
          content: '';
          display: table; }
        .subnav .ico-btn:after {
          clear: both; } }
    .subnav .ico-btn:hover {
      color: #ed7307; }
    .subnav .ico-btn.active {
      color: #ed7307;
      border: 1px solid #ed7307; }

.gap-overlay {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: 1; }

.section {
  background: rgba(0, 0, 0, 0.2);
  z-index: 2; }

.content {
  height: 100%;
  position: relative; }
  .content .content-section {
    height: 100%; }
    .content .content-section .swiper-container {
      height: 100%; }

.content-section {
  opacity: 0;
  display: none;
  top: 0;
  left: 0; }
  .content-section:first-child {
    opacity: 1; }
  .content-section.active {
    display: block; }

/*# sourceMappingURL=/dist/js/blog.css.map */