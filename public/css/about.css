/** Claire Hand **/
@font-face {
  font-family: 'Claire Hand';
  font-weight: bold;
  src: url(../../../fonts/ClaireHand/ClaireHandBold.ttf); }

@font-face {
  font-family: 'Claire Hand';
  font-weight: normal;
  src: url(../../../fonts/ClaireHand/ClaireHandRegular.ttf); }

@font-face {
  font-family: 'Claire Hand';
  font-weight: lighter;
  src: url(../../../fonts/ClaireHand/ClaireHandLight.ttf); }

/** KD Always a Good Time **/
@font-face {
  font-family: 'KD';
  font-weight: normal;
  src: url(../../../fonts/KGAlwaysAGoodTime/KGAlwaysAGoodTime.ttf); }

*, *:after, *:before {
  box-sizing: border-box; }

.page-title {
  font-family: 'Claire Hand';
  font-weight: bold; }

.page-subtitle {
  font-family: 'KD'; }

.page-title, .page-subtitle {
  display: inline-block;
  margin-right: 20px;
  font-size: 40px; }
  @media (max-width: 768px) {
    .page-title, .page-subtitle {
      margin-right: 0;
      width: 100%; } }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
body {
  margin-bottom: 60px; }
  body.projects .title {
    color: #9FD9F0; }
  body.projects .footer, body.projects #navbar {
    background-color: #9FD9F0; }
  body.projects .pages .nav-item.projects {
    display: none !important; }
  body.projects .nav-item {
    background: #9FD9F0;
    background-color: #9FD9F0;
    color: white;
    border-radius: 10px;
    transition: background 250ms linear, color 250ms linear;
    -o-transition: background 250ms linear, color 250ms linear;
    -moz-transition: background 250ms linear, color 250ms linear;
    -webkit-transition: background 250ms linear, color 250ms linear; }
    body.projects .nav-item:hover, body.projects .nav-item.active {
      background-color: #47b6e2; }
  body.get-involved .title {
    color: #9FD9F0; }
  body.get-involved .footer, body.get-involved #navbar {
    background-color: #9FD9F0; }
  body.get-involved .pages .nav-item.get-involved {
    display: none !important; }
  body.get-involved .nav-item {
    background: #9FD9F0;
    background-color: #9FD9F0;
    color: white;
    border-radius: 10px;
    transition: background 250ms linear, color 250ms linear;
    -o-transition: background 250ms linear, color 250ms linear;
    -moz-transition: background 250ms linear, color 250ms linear;
    -webkit-transition: background 250ms linear, color 250ms linear; }
    body.get-involved .nav-item:hover, body.get-involved .nav-item.active {
      background-color: #47b6e2; }
  body.calendar .title {
    color: #E5A33A; }
  body.calendar .footer, body.calendar #navbar {
    background-color: #E5A33A; }
  body.calendar .pages .nav-item.calendar {
    display: none !important; }
  body.calendar .nav-item {
    background: #E5A33A;
    background-color: #E5A33A;
    color: white;
    border-radius: 10px;
    transition: background 250ms linear, color 250ms linear;
    -o-transition: background 250ms linear, color 250ms linear;
    -moz-transition: background 250ms linear, color 250ms linear;
    -webkit-transition: background 250ms linear, color 250ms linear; }
    body.calendar .nav-item:hover, body.calendar .nav-item.active {
      background-color: #a36d16; }
  body.blog .title {
    color: #74C19E; }
  body.blog .footer, body.blog #navbar {
    background-color: #74C19E; }
  body.blog .pages .nav-item.blog {
    display: none !important; }
  body.blog .nav-item {
    background: #74C19E;
    background-color: #74C19E;
    color: white;
    border-radius: 10px;
    transition: background 250ms linear, color 250ms linear;
    -o-transition: background 250ms linear, color 250ms linear;
    -moz-transition: background 250ms linear, color 250ms linear;
    -webkit-transition: background 250ms linear, color 250ms linear; }
    body.blog .nav-item:hover, body.blog .nav-item.active {
      background-color: #408f6b; }
  body.about .title {
    color: #A8B4F3; }
  body.about .footer, body.about #navbar {
    background-color: #A8B4F3; }
  body.about .pages .nav-item.about {
    display: none !important; }
  body.about .nav-item {
    background: #A8B4F3;
    background-color: #A8B4F3;
    color: white;
    border-radius: 10px;
    transition: background 250ms linear, color 250ms linear;
    -o-transition: background 250ms linear, color 250ms linear;
    -moz-transition: background 250ms linear, color 250ms linear;
    -webkit-transition: background 250ms linear, color 250ms linear; }
    body.about .nav-item:hover, body.about .nav-item.active {
      background-color: #4e67e7; }

.title {
  text-align: center;
  width: 100%;
  display: block; }
  .title .page-subtitle {
    text-transform: lowercase; }

.footer {
  position: fixed;
  height: 60px;
  width: 100%;
  bottom: 0;
  left: 0;
  line-height: 45px;
  color: white;
  z-index: 100;
  box-shadow: 0 0 .2em black; }
  .footer .page-name {
    text-transform: lowercase;
    font-size: 25px;
    font-family: 'KD'; }

/* Navbar stuff */
.navbar, .pages {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 100%;
  margin-left: 0%;
  margin-right: 3%;
  font-family: 'Claire Hand';
  font-weight: bold;
  background: inherit;
  line-height: 60px; }
  .navbar:before, .navbar:after, .pages:before, .pages:after {
    content: '';
    display: table; }
  .navbar:after, .pages:after {
    clear: both; }
  .navbar:last-child, .pages:last-child {
    margin-right: 0%; }
  @media (min-width: 768px) {
    .navbar, .pages {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 31.33333%;
      margin-left: 0%;
      margin-right: 3%; }
      .navbar:before, .navbar:after, .pages:before, .pages:after {
        content: '';
        display: table; }
      .navbar:after, .pages:after {
        clear: both; }
      .navbar:last-child, .pages:last-child {
        margin-right: 0%; } }
  .navbar a, .pages a {
    text-decoration: none;
    color: white; }

.footer-extra {
  display: none;
  height: 60px;
  line-height: 60px;
  font-family: 'Claire Hand'; }
  @media (min-width: 768px) {
    .footer-extra {
      display: block;
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 65.66667%;
      margin-left: 0%;
      margin-right: 3%; }
      .footer-extra:before, .footer-extra:after {
        content: '';
        display: table; }
      .footer-extra:after {
        clear: both; }
      .footer-extra:last-child {
        margin-right: 0%; } }
  .footer-extra .nav-item {
    float: right;
    display: inline-block;
    text-decoration: none;
    width: 40%; }

.navbar {
  padding: 10px; }
  .navbar.hidden .nav-item {
    display: none; }
  .navbar.hidden .menu-toggle .fa-caret-up {
    display: none; }
  .navbar.hidden .menu-toggle .fa-caret-down {
    display: inline-block; }
  .navbar .menu-toggle .fa-caret-up {
    display: inline-block; }
  .navbar .menu-toggle .fa-caret-down {
    display: none; }

.pages {
  position: fixed;
  bottom: 60px;
  left: 0;
  background: transparent; }
  .pages .nav-item {
    opacity: 0;
    border: 1px solid white; }

.menu-toggle, .nav-item {
  width: 100%;
  height: 60px;
  line-height: 60px;
  color: white;
  text-align: center;
  font-size: 40px;
  display: block;
  cursor: pointer; }

/* End Navbar stuff */
.write-up, .contact-info {
  width: 100%;
  text-align: center; }

.write-up {
  display: inline-block;
  float: left;
  font-family: "Avant Garde", Avantgarde, "Century Gothic", CenturyGothic, AppleGothic, sans-serif;
  font-size: 26px;
  padding: 0% 5%; }
  @media (max-width: 768px) {
    .write-up {
      width: 100%;
      text-align: center;
      margin: 0; } }

.contact-info {
  float: right;
  text-align: center;
  font-family: 'Claire Hand';
  margin-top: 20px;
  margin-bottom: 120px; }
  .contact-info p {
    font-size: 30px;
    width: 75%;
    margin: 0 auto;
    color: #A8B4F3; }
  .contact-info .get-in-touch {
    width: 50%;
    margin: 0 auto;
    background: #9FD9F0;
    color: white;
    font-family: 'Claire Hand';
    text-align: center;
    text-decoration: none;
    display: block;
    font-size: 20px;
    line-height: 20px;
    padding: 5px;
    padding-top: 10px;
    border-radius: 10px;
    margin-top: 10px;
    background-color: #9FD9F0;
    color: white;
    border-radius: 10px;
    transition: background 250ms linear, color 250ms linear;
    -o-transition: background 250ms linear, color 250ms linear;
    -moz-transition: background 250ms linear, color 250ms linear;
    -webkit-transition: background 250ms linear, color 250ms linear; }
    .contact-info .get-in-touch:hover, .contact-info .get-in-touch.active {
      background-color: #47b6e2; }
